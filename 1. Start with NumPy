********************************************** JBU ******************************************
                       ===============================================
import numpy as np
# -------------------- Creating Numpy Arrays by various methods ------------------------
#1. by np.array
--------------------------
arr = np.array([1,2,3,4,5]) # 1 D Aray
print arr
# get shape and dim of array
print ("Shape :",arr.shape)
print ("Dim :",arr.ndim)

output:
[1 2 3 4 5]
('Shape :', (5,))
('Dim :', 1)

=========================================================================================
# 1 D Array with  each element as one list
---------------------------------------------
arr2 = np.array([[1,2,3],
                 [4,5,6,7]])
print arr2
print type(arr2)
print type(arr2[0])
# get shape and dim of array
print ("Shape :",arr2.shape)
print ("Dim :",arr2.ndim)
# GET FIRST ELEMENT OF THIS 1 D ARRAY

print ("Arr[0] :",arr2[0])
# Get 2 element of first list
print ("Arr[0][1] :",arr2[0][1])

output:
[list([1, 2, 3]) list([4, 5, 6, 7])]
<type 'numpy.ndarray'>
<type 'list'>
('Shape :', (2,))
('Dim :', 1)
('Arr[0] :', [1, 2, 3])
('Arr[0][1] :', 2)

------------------------------------
# 2 D array
arr3 = np.array([[1,2,3],
                 [4,5,6]])
print arr3
print type(arr3)
print type(arr3[0])

output:
[[1 2 3]
 [4 5 6]]
<type 'numpy.ndarray'>
<type 'numpy.ndarray'>

------------------------------------
# get shape and dim of array

print ("Shape :",arr3.shape)
print ("Dim :",arr3.ndim)

output:
('Shape :', (2, 3))
('Dim :', 2)

=========================================================================================
#2. Creating array using arange(n) method
--------------------------------------------
n    = 10
arr4 = np.arange(n)
arr4
# arrange give values from 0 to n-1

output:
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

=========================================================================================
#3. Creating array using arange(start,end(exclusive),stepsize) method
----------------------------------------------------------------------
arr5 = np.arange(2,16.5,2)
arr6 = np.arange(2,16,2)
print arr5
print arr6
print type(arr5)


output:
[ 2.  4.  6.  8. 10. 12. 14. 16.]
[ 2  4  6  8 10 12 14]
<type 'numpy.ndarray'>

=========================================================================================
#4. Creating array using linspace(start,end,noOfElement)
----------------------------------------------------------
arr7 = np.linspace(2,16,2)
arr8 = np.linspace(2,16,5)

print arr7
print arr8

output:
[ 2. 16.]
[ 2.   5.5  9.  12.5 16. ]

# linspace() includes both start and end element.
# arange() includes only start element.
=========================================================================================
#5. --------------- Creating array using functions ---------------------
#i. using ones()
arr  = np.ones(5)
arr2 = np.ones((2,3))
arr3 = np.ones((2,3,2))
print arr
print ("Dim :", arr.ndim)

output:
[1. 1. 1. 1. 1.]
('Dim :', 1)

---------------------------
print arr3
print ("Dim :", arr3.ndim)

output:
[[[1. 1.]
  [1. 1.]
  [1. 1.]]

 [[1. 1.]
  [1. 1.]
  [1. 1.]]]
('Dim :', 3)

-----------------------------
# ii. array using zeros

#arr = np.zeros(2,3)
#TypeError: data type not understood 
arr = np.zeros((2,3))
print arr

output:
[[0. 0. 0.]
 [0. 0. 0.]]
 
-------------------------------
# iii. using eye() method: produces identity matrix

arr = np.eye(3)
print arr
print arr.ndim

output:
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]

2

---------------------------------
# iv. diag() : Produces diagonal matrix
arr = np.diag((2,1,7))
arr

output:
array([[2, 0, 0],
       [0, 1, 0],
       [0, 0, 7]])
       
----------------------------------
arr2 = np.diag([2,3,4,5])
arr2

output:
array([[2, 0, 0, 0],
       [0, 3, 0, 0],
       [0, 0, 4, 0],
       [0, 0, 0, 5]])
       
----------------------------------
# v. random.rand() method 
# a. rand(m) : produces "uniformaly distributed" random values from 0 to m
# b. randn(m): produces "m normally distributed(Gaussian)" random numbers.

# ---------------- rand(m) ---------------------
import datetime
print datetime.datetime.now()

arr = np.random.rand(5)
print ("Arr :",arr)

# everytime when will execute this .. it will give different values

output:
2019-09-07 08:35:02.664000
('Arr :', array([0.94002982, 0.81764938, 0.33611195, 0.17541045, 0.37283205]))

---------------------------------------------------

# After setting seed value
np.random.seed(100)

arr = np.random.rand(5)
print ("Arr :",arr)

# everytime now when will execute this .. it will give same values

output:
('Arr :', array([0.54340494, 0.27836939, 0.42451759, 0.84477613, 0.00471886]))

----------------------------------------------------
# -------------------- Gaussian values -------------------
arr = np.random.randn(5)
print arr

output:
[ 0.17957831 -0.5771615  -0.53337271 -0.22540212 -0.31491934]

------------------------------------------------------
# v. empty() : is the fastest way to allocate an array , rather than using ones() & zeros()
# it will create uninitialized array

arr34 = np.empty(6)
arr34

output:
array([1., 1., 1., 1., 1., 1.])

------------------------------------------------------
# vi. tile() : creates an array by repeating a small array

arr = np.tile(5,2) #repeat 5 , 2 times
print arr

output:
[5 5]

-------------------------------------------------------
arr2 = np.tile([3,4],3) # repeat [3,4] to 3 times
print arr2

output:
[3 4 3 4 3 4]

-------------------------------------------------------
arr3 = np.tile([[1,2],[3,4]], (2,2)) # repeat  [1,2],[3,4] in 2 * 2 matrix
print arr3

output:
[[1 2 1 2]
 [3 4 3 4]
 [1 2 1 2]
 [3 4 3 4]]
 
=========================================================================================

# *************************** Numpy DataTypes ***********************************
# use dtype with array to decide dtypes of contents of a numeric array
-------------------------------------------
arr = np.array([1,2,3],dtype='float')
print arr
print arr[0].dtype
print arr.dtype

output:
[1. 2. 3.]
float64
float64

--------------------------------------------
arr2 = np.array([1,2,3],dtype='str')
print arr2
print arr2[0].dtype
print arr2.dtype

output:
['1' '2' '3']
|S1
|S1

---------------------------------------------
arr3 = np.array(['a','b','c'],dtype='float')
print arr3
print arr3[0].dtype
print arr3.dtype

output:

ValueError                                Traceback (most recent call last)
<ipython-input-132-73d0ed4c87a5> in <module>()
----> 1 arr3 = np.array(['a','b','c'],dtype='float')
      2 print arr3
      3 print arr3[0].dtype
      4 print arr3.dtype

ValueError: could not convert string to float: a

----------------------------------------------
arr3 = np.array(['a','b','c'],dtype='str')
print arr3
print arr3[0].dtype
print arr3.dtype

output:
['a' 'b' 'c']
|S1
|S1



=========================================================================================
# ------------------------------- Array Indexing & Slicing ----------------------
arr = np.arange(5)
arr

output:
array([0, 1, 2, 3, 4])

----------------------------------
# Get 2nd & last value of arr
print ("2nd :",arr[1])
print ("Last:",arr[-1])

output:
('2nd :', 1)
('Last:', 4)

----------------------------------
# Reversing array 
arr = arr[::-1]
print arr

otput:
[4 3 2 1 0]

----------------------------------
#  Indexing on multi dimensional array
arr2 = np.array([[1,2,3],[4,5,6],[7,8,9]])
arr2

output:

array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
       
----------------------------------
print arr2.ndim
print arr2.shape

output:
2
(3, 3)

----------------------------------
# do get the value of following;
# 1. fetch 2 
print arr2[(0,1)]
print arr2[0,1]

output:
2
2

----------------------------------
# 2. get entire row 2
print arr2[1, :]
print arr2[1]

output:
[4 5 6]
[4 5 6]

----------------------------------
# 3. Get 3 column
print arr2[:,2]

output:
[3 6 9]

----------------------------------
# 4. get only 5 & 6
print arr2[1,1:3]  # from 1:3 value of only 1 and 2 will come. 3 is excluded

output:
[3 6 9]

----------------------------------
# 4. get only 5 & 6
print arr2[1,1:3]  # from 1:3 value of only 1 and 2 will come. 3 is excluded

output:
[5 6]

----------------------------------
# 5. GET this matrix:
#[[5 6]
# [8 9]]

print arr2[1:3,1:3]
output:
[[5 6]
 [8 9]]
 
-----------------------------------
# 6. Get value of both diagonal in both order : up - down & down - up

print [arr2[i][i] for i in range(3)]
#print [arr2[3-i][3-i] for i in range(3)]
#when we try to get value out of bound of matrix size will get this error
#IndexError: index 3 is out of bounds for axis 0 with size 3
print [arr2[3-1-i][3-1-i] for i in range(3)]


# [[1, 2, 3],
#  [4, 5, 6],
#  [7, 8, 9]]

output:
[1, 5, 9]
[9, 5, 1]


-----------------------------------
# (0,2 ), (1,1),(2,0)
print [arr2[i][3-1-i] for i in range(3)]
# (2,0),(1,1),(0,2)
print [arr2[3-1-i][i] for i in range(3)]

output:
[3, 5, 7]
[7, 5, 3]

=========================================================================================
# ----------------------- Array Slicing ------------------------
# arrays can be sliced as follows:
# arr[startIdx, endIdx, stepValue]

# ----------- Slicing with 1 D arrat -------------------------
arr = np.arange(1,10,1)
print arr

# get 1,3,5
print arr[0:5:2]

# get 2,4,6,8
print arr[1:9:2]

# get first 5 element
print arr[:5]

# get all values from 4 to end
print arr[3:]


# slice array with stepValue=3
print arr[::3]

output:
[1 2 3 4 5 6 7 8 9]
[1 3 5]
[2 4 6 8]
[1 2 3 4 5]
[4 5 6 7 8 9]
[1 4 7]


=========================================================================================
# -------------- Array slicing for 2 D array --------------
print arr2

output:
[[1 2 3]
 [4 5 6]
 [7 8 9]]
 
--------------------------
# predict output of following
print arr2[1:5:1]

output:
[[4 5 6]
 [7 8 9]]
 
--------------------------
# get only 2nd row using array slicing method
print arr2[1:3:2]

output:
[[4 5 6]]

--------------------------
# get last 2 row
print arr2[1:3:1]

output:
[[4 5 6]
 [7 8 9]]
 
=========================================================================================
